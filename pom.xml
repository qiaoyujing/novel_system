<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.qj</groupId>
    <artifactId>novel_system</artifactId>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>novel_base</module>
        <module>novel_crawler</module>
    </modules>
    <packaging>pom</packaging>

    <name>novel_system</name>
    <description>practice my programming skills</description>


    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <skipTests>true</skipTests>
        <spring-cloud.version>Hoxton.SR8</spring-cloud.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--
                支持注解：@controller、@Service、@Component、@Resource 是spring的，所以spring boot创建完成后就可以使用（由spring-boot-starter支持）
                支持注解：@RestController、@RequestMapping、@ResponseBody、@JsonFormat（由spring-boot-starter-web支持）
                spring-boot-starter-web 是什么？
                spring-boot-starter-web是一个依赖库，Spring Boot 是在 Spring 的基础上创建的一个开原框架，它提供了 spring-boot-starter-web （web场景启动器）来为web开发予以支持。spring-boot-starter-web 为什么提供了嵌入的Servlet容器以及SpringMVC提供了大量自动配置，可以适用于大多数web开发场景。
                只要我们在Spring Boot 项目中的 pom.xml 中引入了spring-boot-starter-web依赖，即使不进行任何配置，也可以使用Spring MVC 进行 Web 开发。Spring Web的启动程序使用Spring MVC, REST和Tomcat作为默认的嵌入式服务器。单个spring-boot-starter-web依赖关系可传递地获取与Web开发相关的所有依赖关系。它还减少了构建依赖项计数。
                spring-boot-starter-web包含了spring-boot-starter,所以不用配置spring-boot-starter-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>2.3.2.RELEASE</version>
                <!--<scope>test</scope>-->
                <!--junit-vintage-engine提供了Junit3与Junit4的运行平台-->
                <!--这个是JUnit5中为了支持使用JUint4所做的一个过度
                   也就是说，你只需要在你的JUnit4旧项目中添加这个依赖，
                   就能完美过渡，而不用修改之前代码
                   这里用不到，自然也就排除了。当然，这里，它无关紧要
                        -->
                <exclusions>
                    <exclusion>
                        <groupId>org.junit.vintage</groupId>
                        <artifactId>junit-vintage-engine</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>


            <!--MySQL 连接组件-->
            <!--配置mysql依赖时，不写版本号xx.xx.xx的话，就会引入mysql依赖的默认版本
            SpringBoot2.1.x以后默认使用的是mysql 8版本，
            SpringBoot2.1.x之前默认使用的是mysql 5.x版本
            在配置数据源的时候，就有差异了:
            配置低版本 5.xx.xx：
            spring.datasource.driver-class-name=com.mysql.jdbc.Driver
            spring.datasource.url=jdbc:mysql://localhost:3306/student?useUnicode=true&characterEncoding=UTF-8&useSSL=false
            spring.datasource.username=root
            spring.datasource.password=123456

            配置高版本 8.xx.xx：
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
            spring.datasource.url=jdbc:mysql://localhost:3306/student?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8&useSSL=false
            spring.datasource.username=root
            spring.datasource.password=123456-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.47</version>
            </dependency>

            <!--spring-boot-starter-jdbc 是Spring Boot提供的数据库访问相关的启动器依赖包,其主要作用是帮助在Spring Boot项目中使用JDBC访问数据库。
            spring-boot-starter-jdbc的功能和作用包括:
            1. 提供JDBC的相关依赖,包括JDBC API和数据库驱动依赖
            2. 默认提供一个内嵌的数据库连接池 - HikariCP,可以直接注入DataSource使用
            3. 提供JdbcTemplate等JDBC模板类,可以直接使用模板简化JDBC操作
            4. 自动注册一个JdbcTemplate的Bean,可以自动注入使用
            5. 提供一个自动配置的JdbcTemplate,默认配置了数据源并可以直接使用
            6. 自动生成相关的配置属性(application.properties中数据库连接信息)
            7. 实现了数据库连接池的自动配置
            8. 由于引入jdbc模块,可以实现数据库的监控
            总之,使用spring-boot-starter-jdbc可以非常方便的在Spring Boot项目中利用JDBC技术来操作数据库,而不需要手动管理数据库连接池或是DataSource,就可以直接使用JdbcTemplate等来实现数据库的访问。
            需要注意的是,spring-boot-starter-jdbc还是需要手写SQL语句来操作数据库的-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jdbc</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>

            <!--    Druid Spring Boot 组件 数据库连接池配置,监控数据库访问性能和连接池状态
            druid-spring-boot-starter 是 Druid 数据库连接池与 Spring Boot 进行集成的启动器依赖包。它的主要功能和作用如下:
            1. 自动化配置Druid数据库连接池,包括数据源、过滤器、监控等。
            2. 整合Druid和Spring的配置,实现数据库连接池的自动管理。
            3. 提供druid-spring-boot-starter的自动配置类,可自定义数据源配置。
            4. 实现数据库监控的自动化集成,如Druid监控界面。
            5. 支持Druid数据源的定制化配置,包括连接池大小、Filters等高级配置。
            6. 支持通过配置文件进行Druid数据库连接池相关属性的配置。
            7. 实现Druid和其他数据库框架(如MyBatis、JPA等)的无缝集成。
            8. 支持使用Spring Boot的特性进行Druid的数据源管理,如外部化配置等。
            9. 提供Druid默认的生产可用配置,开箱即用。
            10. 支持Druid插件体系,可以灵活扩展Druid的功能。
            总体来说,使用druid-spring-boot-starter可以极大地简化Druid数据库连接池在Spring Boot项目中的配置和使用,使得可以专注于SQL本身而非连接池的配置管理。
            -->
            <!--https://blog.csdn.net/munangs/article/details/124724091?spm=1001.2014.3001.5502-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>1.2.2</version>
            </dependency>

            <!--MyBaits
            mybatis-spring-boot-starter 是 MyBatis 与 Spring Boot 集成的启动器依赖包。它的主要作用是帮助在 Spring Boot 项目中便捷集成 MyBatis 框架。
            mybatis-spring-boot-starter 的主要功能和作用:
            1. 自动检测项目中存在的 Mapper 类,将其注册为 Spring Bean。
            2. 自动扫描定义的 Mapper XML 文件或者注解。
            3. 默认提供 SqlSessionFactory 和 SqlSessionTemplate Bean,可以直接注入使用。
            4. 自动配置 DataSource 等数据库相关属性。
            5. 自动管理事务,整合 Spring 的事务功能。
            6. 提供 MyBatis 相关的默认配置属性,如 map-underscore-to-camel-case等。
            7. 支持 MyBatis 的插件机制,可以方便集成插件。
            8. 自动管理配置日志,如 Log4j、Logback 等。
            9. 支持自定义 MyBatis 配置覆盖默认值。
            10. 支持多数据源配置。
            11. 与 Spring Boot 无缝集成,提供自动配置等特性。
            综上,使用 mybatis-spring-boot-starter 可以极大的简化 Mybatis 在 Spring Boot 中的配置工作,可以专注于 SQL 映射文件和接口开发上,提高工作效率。
            -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.1.2</version>
            </dependency>
            <!--mybatis-plus-boot-starter 和 mybatis-spring-boot-starter 都是帮助集成 MyBatis 到 Spring Boot 的启动器,它们的联系和区别如下:
            联系:
            - 两者都可以帮助实现在 Spring Boot 项目中自动配置和集成 MyBatis。
            - 都可以通过少量配置就可以使 MyBatis 在 Spring Boot 中运行。
            区别:
            - mybatis-spring-boot-starter 是 MyBatis 官方提供的启动器,直接集成了 MyBatis。
            - mybatis-plus-boot-starter 基于 mybatis-spring-boot-starter 进行了增强,集成了 MyBatis-Plus。
            - MyBatis-Plus 在 MyBatis 的基础上提供了额外的功能,如主键生成、SQL 注入防范、自动填充等特性。
            - 如果只需要原生 MyBatis,使用 mybatis-spring-boot-starter 即可。
            - 如果需要 MyBatis-Plus 提供的额外增强功能,则需要使用 mybatis-plus-boot-starter。
            综上,mybatis-plus-boot-starter相比于mybatis-spring-boot-starter,提供了MyBatis-Plus的增强功能,但需要同时引入mybatis-spring-boot-starter。二者可以根据实际需要进行选择。
            -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>3.3.1</version>
            </dependency>

            <!--        MP代码生成器依赖-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>3.3.1</version>
            </dependency>

            <!-- Json格式转换工具Fastjson
            Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.47</version>
            </dependency>

            <!--gson和fastjson都是常用的Java语言中的JSON解析库,它们之间有一些区别和联系:
            联系:
            - 都可以将Java对象转换成JSON格式,也都可以将JSON解析成Java对象。
            - 都支持泛型,可以自动解析含泛型信息的Java类。
            - 都支持流式API,可以边解析边处理,无需将整个JSON加载到内存。
            - 都有快速模式和反射模式,快速模式性能更好,反射模式使用更灵活。
            区别:
            - fastjson是阿里巴巴开源的,解析速度更快,是Java中最快的JSON库。gson解析速度稍慢一些。
            - gson对对象字段大小写不敏感,fastjson对字段大小写敏感。
            - fastjson会忽略Java类中非JSON映射的字段,gson会保留所有字段。
            - gson在格式化输出JSON时可读性更好,fastjson输出更加紧凑。
            - gson更加严格,只接受JSON标准格式,fastjson接受更宽松的格式。
            - gson对特殊数字处理不如fastjson完善,比如NaN,Infinity等。
            总结:
            fastjson因为性能出众更适合解析大量、复杂的JSON数据,gson提供更好的可读性,更严格符合JSON标准。需要选择一个就看应用场景和个人习惯。-->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>2.8.7</version>
            </dependency>
            <!-- PageHelper 分页插件 -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>1.2.3</version>
            </dependency>

            <!--LomBok-->
            <!--lombok最优秀的就是注解了，一个注解就干掉了很多代码
            实体类中的注解.
            @Data ：直接可以省略了Get、Set方法
            @Slf4j ：不需要单独引入日志依赖和配置日志，直接 log.info( ) 打印日志-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.18.8</version>
            </dependency>

            <!--Spring Boot Aop 如果使用了spring-boot-starter-web,则会传递引入spring-boot-starter-aop。-->
            <!--支持的注解：@AspectJ、@Pointcut、通知注解（如：@Before、@After等）、@Aspect和自定义注解
            spring-boot-starter-aop及其使用场景说明
            SpringBoot 中的 Aop 注解使用+ 自定义注解-->
            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>-->


            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>-->

            <!--Spring Validation-->
            <!--支持的注解：@Max，@Min等 常用注解和demo-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>

            <!--spring-boot-starter-cache是Spring Boot提供的缓存相关的启动器依赖包,它的主要作用是帮助在Spring Boot项目中快速启用缓存功能。
            spring-boot-starter-cache的功能和作用包括:
            1. 自动化配置Spring缓存相关的基础架构 Beans,如CacheManager、CacheResolver等。
            2. 提供基于注解的缓存功能,只需要使用@Cacheable、@CachePut、@CacheEvict等注解就可以启用缓存。
            3. 整合Spring和缓存中间件(如EhCache、Redis等)的配置,实现缓存管理的自动配置。
            4. 提供对主流缓存中间件的默认支持,如EhCache、Hazelcast、Infinispan、Couchbase、Redis等。
            5. 提供CacheManager的自定义配置入口,可以自定义CacheManager的实例。
            6. 支持使用SpEL表达式实现动态缓存Key。
            7. 与Spring Boot应用程序透明地集成,采用约定优于配置的方式,简化缓存配置。
            8. 提供缓存相关的公共配置属性,可以通过配置文件快速自定义缓存行为。
            9. 支持使用缓存注解启用函数缓存、方法缓存和类缓存等多种粒度的缓存。
            综上,使用spring-boot-starter-cache可以快速便捷地在Spring Boot项目中启用缓存功能,提高应用程序性能。-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-cache</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>
            <!--Hutool-->
            <!-- hutool-all是Hutool工具类库的全部依赖组合包,它将Hutool下的子模块全部集成到一个依赖中,方便使用。
            hutool-all的主要功能和作用:
            1. 提供Java基础工具类,如数组、日期、流、编码等操作类。
            2. 提供了常用的工具方法,如随机数、字符串处理、数字格式化等。
            3. 提供了IO、网络、图像、电子邮件等操作相关的工具类。
            4. 提供了反射、定时任务、设置、系统信息等方法。
            5. 提供了日志记录、元数据解析、JSON、XML等格式处理的工具类。
            6. 提供了数据库相关的工具类,如SQL构建、JDBC操作等。
            7. 提供缓存、加密解密、hon代码生成等常用功能。
            8. 包含其他模块如http、captcha、log、lombok等。
            9. 提供Fluent API风格的调用方式。
            10. 零依赖,可以单独使用其中的部分工具类。
            综上,hutool-all打包了Hutool所有功能,是一个集大成的巨型工具类包,使得在项目中可以避免引入过多依赖,同时提供完整强大的工具类支持,非常适合应用于各种Java项目和应用中。
            -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>5.4.7</version>
            </dependency>

            <!--springboot热部署 修改java代码后，不用重启项目就能直接最新测试，省略了不断修改代码不断重启项目的麻烦
            spring-boot-devtools是Spring Boot提供的一种开发者工具,它提供了以下主要功能和作用:
            1. 自动应用代码更改,无需重新启动应用程序。它通过使用两个类加载器来实现对代码更改的自动加载,一个用于类路径上的代码,一个用于静态资源。
            2. 自动启用属性配置。它可以自动应用application.properties和application.yml文件中的属性更改。
            3. 启动时自动禁用模板缓存。它禁用Thymeleaf、FreeMarker、JSP等模板引擎的缓存,以便在每次修改后可以直接生效。
            4. 提供LiveReload服务器,可以自动刷新浏览器。如果启用了spring-boot-devtools,浏览器插件可以自动刷新页面。
            5. 提供远程应用程序重启和调试支持。可以通过HTTP请求远程重启和调试Spring Boot应用程序。
            6. 提供开发者工具配置,如自动重启、属性覆盖等行为的开关控制。
            7. 提供执行器(Executors)插件,可以运用于IDE直接开发和调试项目。
            总之,spring-boot-devtools可以极大提高Spring Boot项目的开发效率,自动应用代码更改非常方便,无需重启应用程序即可看到修改效果。它是进行Spring Boot开发的必备工具。-->
            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <optional>true</optional>
            </dependency>-->

            <!--commons-lang3是Apache Commons Lang项目的一个组件,提供了很多有用的Java工具类。其主要功能和作用如下:
            1. 提供了字符串处理的工具类,包含字符串连接、分割、替换、去空格、比较、indexOf等多种字符串方法。
            2. 提供了数组处理的工具类,包含数组比较、搜索、添加、排序、转换为List等多种数组方法。
            3. 提供了数字/日期/时间处理的工具类,包含最大值最小值计算、日期格式化、时间操作等方法。
            4. 提供了对象操作的工具类,包含对象比较、哈希码生成、克隆、判断空对象等方法。
            5. 提供了反射操作的工具类,获取类名、获取父类、调用方法等反射相关方法。
            6. 提供了异常处理的工具类,包含获取异常信息、打印异常栈、遍历异常链等方法。
            7. 提供了系统工具类,获取系统属性、环境变量等方法。
            8. 提供Fluent API风格的调用方式。
            9. 同时还包含其他各种日常编程中常用的基础工具。
            10. 只依赖Java标准库,不依赖任何第三方库。
            综上,commons-lang3为Java开发提供了非常丰富实用的工具类,可以极大地提高开发效率,是Java项目中很常见的基础工具类库。-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.6</version>
            </dependency>

            <!--自定义配置出现提示
            spring-boot-configuration-processor是Spring Boot提供的用于生成元数据的注解处理器。其主要功能和作用如下:
            1. 它可以处理Spring Boot应用中的@ConfigurationProperties注解,从而生成相关的元数据信息。
            2. 生成的元数据信息可以在应用运行时用于验证和完成@ConfigurationProperties beans的绑定过程。
            3. 通过使用spring-boot-configuration-processor,可以避免在应用启动时反复解析配置属性元数据,提升应用启动性能。
            4. 生成的元数据文件也可以用来生成配置属性的参考文档,里面包含了配置前缀、配置项名称、配置项类型、默认值等信息。
            5. spring-boot-configuration-processor会在编译时对使用@ConfigurationProperties注解的bean进行验证,检查属性名是否正确、类型是否匹配等,提早发现问题。
            6. 支持添加元数据到已生成的配置元数据文件中,这样就可以支持多模块工程的元数据聚合。
            7. 支持统一的配置属性名称转换规则,如驼峰转下划线等。
            8. 与Spring Boot无缝集成,提供自动配置和默认属性绑定等功能。
            综上,使用spring-boot-configuration-processor可以简化配置属性的使用,提高应用性能,同时进行编译期验证。它是使用配置属性注解的最佳实践。-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-configuration-processor</artifactId>
                <version>2.2.9.RELEASE</version>
                <optional>true</optional>
            </dependency>

            <!-- Swagger UI API接口-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>2.9.2</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>2.9.2</version>
            </dependency>
            <!--<dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>swagger-bootstrap-ui</artifactId>
                <version>1.9.6</version>
            </dependency>-->


            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>28.0-jre</version>
            </dependency>
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>3.11.1</version>
            </dependency>
            <dependency>
                <groupId>io.shardingsphere</groupId>
                <artifactId>sharding-jdbc-spring-namespace</artifactId>
                <version>3.1.0</version>
            </dependency>
            <!--<dependency>
                <groupId>org.freemarker</groupId>
                <artifactId>freemarker</artifactId>
                <version>2.3.30</version>
            </dependency>-->
            <!--<dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-engine-core</artifactId>
                <version>2.0</version>
            </dependency>
            <dependency>
                <groupId>redis.clients</groupId>
                <artifactId>jedis</artifactId>
                <version>3.1.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.hbase</groupId>
                <artifactId>hbase-client</artifactId>
                <version>2.1.3</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.retry</groupId>
                <artifactId>spring-retry</artifactId>
                <version>1.2.4.RELEASE</version>
            </dependency>-->
            <!--shiro-->
           <!-- <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-spring</artifactId>
                <version>1.4.1</version>
            </dependency>
            <dependency>
                <groupId>org.crazycake</groupId>
                <artifactId>shiro-redis</artifactId>
                <version>3.2.3</version>
            </dependency>-->
            <!-- jwt-->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>3.4.0</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>easyexcel</artifactId>
                <version>2.2.6</version>
            </dependency>
            <!--<dependency>
                <groupId>ch.hsr</groupId>
                <artifactId>geohash</artifactId>
                <version>1.3.0</version>
            </dependency>
            <dependency>
                <groupId>org.gavaghan</groupId>
                <artifactId>geodesy</artifactId>
                <version>1.1.3</version>
            </dependency>-->
            <!-- es-->
            <!--<dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-elasticsearch</artifactId>
                <version>4.0.7.RELEASE</version>
            </dependency>-->
            <!--<dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-s3</artifactId>
                <version>1.12.21</version>
            </dependency>-->
            <!-- https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-core -->
            <!--<dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-core</artifactId>
                <version>1.12.21</version>
            </dependency>
            <dependency>
                <groupId>org.apache.pdfbox</groupId>
                <artifactId>fontbox</artifactId>
                <version>2.0.24</version>
            </dependency>-->
            <!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox -->
           <!-- <dependency>
                <groupId>org.apache.pdfbox</groupId>
                <artifactId>pdfbox</artifactId>
                <version>2.0.24</version>
            </dependency>-->
            <dependency>
                <groupId>com.belerweb</groupId>
                <artifactId>pinyin4j</artifactId>
                <version>2.5.0</version>
            </dependency>
            <!--<dependency>
                <groupId>org.apache.skywalking</groupId>
                <artifactId>apm-toolkit-logback-1.x</artifactId>
                <version>8.4.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.skywalking</groupId>
                <artifactId>apm-toolkit-trace</artifactId>
                <version>8.4.0</version>
            </dependency>-->


            <!--<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-amqp</artifactId>
                <version>2.3.2.RELEASE</version>
            </dependency>-->
        </dependencies>

    </dependencyManagement>
    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
        <!--<plugins>
            &lt;!&ndash;用于生成部署到服务器的包&ndash;&gt;
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>copy</id>
                            <phase>install</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <skipTests>true</skipTests>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>

                <!-- mybatis generator 自动生成代码插件 -->
                <plugin>
                    <groupId>org.mybatis.generator</groupId>
                    <artifactId>mybatis-generator-maven-plugin</artifactId>
                    <version>1.3.6</version>
                    <configuration>
                        <configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml
                        </configurationFile>
                        <!-- 是否覆盖 -->
                        <overwrite>false</overwrite>
                        <!--允许移动生成的文件 -->
                        <verbose>true</verbose>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.1.2</version>
                    <configuration>
                        <configLocation>style/tkcCheckStyle.xml</configLocation>
                        <includeTestSourceDirectory>true</includeTestSourceDirectory>
                        <encoding>UTF-8</encoding>
                        <consoleOutput>true</consoleOutput>
                        <failsOnError>true</failsOnError>
                        <excludes>
                            **/test/**,**/utils/uuid/**,**/utils/PositionUtil.java,**/commons/mapper/**,**/commons/service/**,**/utils/PngOperator.java,**/utils/MapUtils.java,**/utils/CalculateDistanceUtil.java
                        </excludes>
                    </configuration>
                    <executions>
                        <execution>
                            <id>validate</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

    </build>

    <!--定义三种开发环境-->
    <profiles>
        <profile>
            <!--不同环境的唯一id-->
            <id>dev</id>
            <activation>
                <!--默认激活开发环境-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--profile.active对应application.yml中的@profile.active@-->
                <profileActive>dev</profileActive>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
        </profile>

        <!--测试环境-->
        <profile>
            <id>test</id>
            <properties>
                <profileActive>test</profileActive>
                <spring.profiles.active>test</spring.profiles.active>
            </properties>
        </profile>

        <!--生产环境-->
        <profile>
            <id>prd</id>
            <properties>
                <profileActive>prd</profileActive>
                <spring.profiles.active>prd</spring.profiles.active>
            </properties>
        </profile>
    </profiles>


    <repositories>
        <repository>
            <id>nexus-aliyun</id>
            <name>Nexus aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
        </repository>
    </repositories>
</project>